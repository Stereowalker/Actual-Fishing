plugins {
	id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.145'
    id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.modrinth.minotaur" version "2.+"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

minecraft {
  accessTransformers {
    file('src/main/resources/META-INF/accesstransformer.cfg')
  }
}

runs {
    configureEach {
        systemProperty 'forge.logging.markers', 'REGISTRIES'
        systemProperty 'forge.logging.console.level', 'debug'
        modSource project.sourceSets.main
    }
    client {
        systemProperty 'forge.enabledGameTestNamespaces', project._mod_id
        workingDirectory project.file("run/${project._loader}-Client")
    }
    server {
        systemProperty 'forge.enabledGameTestNamespaces', project._mod_id
        workingDirectory project.file("run/${project._loader}-Server")
        programArgument '--nogui'
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

configurations {
    runtimeClasspath.extendsFrom localRuntime
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": _mod_name,
            "Specification-Vendor": "Stereowalker",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Stereowalker",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

// Should exist on all loaders and is loader specific
repositories {
	maven {url "https://modmaven.dev/" }// UnionLib
	maven {url "https://www.cursemaven.com"} //CurseForge
    maven {url = "https://repo.spongepowered.org/maven"} // mixin
	maven {url "https://girafi.dk/maven/"}
}

dependencies {
	implementation ("net.neoforged:neoforge:${_loader_version}")
	
	implementation ("com.stereowalker.unionlib:UnionLib:${_minecraft_version}-${_unionlib_version}-${_loader}")
	implementation ("com.teammetallurgy.aquaculture:aquaculture2_${_minecraft_version}:${_minecraft_version}-${_aquaculture_version}")
	//implementation "curse.maven:nether-depths-upgrade-670011:5458412"
	//implementation "curse.maven:geckolib-388172:5460144"
}

// These aren't loader specific and should exist on all loaders
println('Java: ' + System.getProperty('java.version'))
println('JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println('Mod Name: ' + _mod_name + ', Mod Version: ' + _mod_version + ', Minecraft Version: ' + _minecraft_version + ', '+"${_loader} Version: " + _loader_version)

version = _minecraft_version + "-" +_mod_version +"-${_loader}"
group = modGroup
base {
    archivesName = _mod_name
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: _minecraft_version,
            minecraft_version_min: _minecraft_version_min, minecraft_version_max: _minecraft_version_max,
            loader_version_min: _loader_version_min, loader_version_max: _loader_version_max,
            mod_page: _mod_page, mod_version: _mod_version, mod_issue_tracker: _mod_issue_tracker,
            mod_name: _mod_name, mod_license: _mod_license, mod_id: _mod_id,
            mod_authors: _mod_authors, mod_description: _mod_description, loader_file: _loader_file,
            unionlib_version_min: _unionlib_version_min, unionlib_version_max: _unionlib_version_max,
    ]
    inputs.properties replaceProperties
    filesMatching([_loader_file, 'pack.mcmeta']) {
        expand replaceProperties// + [project: project]
    }
}

curseforge {
    project {
    	id = "${_curseforge_id}"
		apiKey = "$System.env.CURSEFORGEKEY"
		changelog = file('changelog.md')
		changelogType = "markdown"
		releaseType = 'release'
		addGameVersion("${_minecraft_version}")
        addGameVersion("${_loader}")
		relations {
      		requiredDependency 'unionlib'
      		optionalDependency 'aquaculture'
		}
		mainArtifact(jar) {
			displayName = _mod_name+"-$project.version"
		}
	}		
}

modrinth {
    projectId = "${_modrinth_id}"
    token = "$System.env.MODRINTH_TOKEN"
    versionNumber = "${project.version}"
    versionType = "release"
    uploadFile = jar
    gameVersions = ["${_minecraft_version}"]
    loaders = ["${_loader}".toLowerCase()]
	changelog = file('changelog.md').text
    dependencies {
        required.project "unionlib"
        optional.project "aquaculture"
    }
}

task uploadToAllSites {
    dependsOn "curseforge"
    dependsOn "modrinth"
    group = "publishing"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
