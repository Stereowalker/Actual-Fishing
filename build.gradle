plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id "com.matthewprenger.cursegradle" version "1.4.0"
	id "com.modrinth.minotaur" version "2.+"
}

loom {
	mixin.defaultRefmapName.set("${_mod_id}.refmap.json")
	accessWidenerPath = file("src/main/resources/${project._mod_id}.accesswidener")
	runs {
		client {runDir "run/${project._loader}-Client"}
		server {runDir "run/${project._loader}-Server"}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 21
}

java {
	withSourcesJar()
	sourceCompatibility = JavaVersion.VERSION_21
	targetCompatibility = JavaVersion.VERSION_21
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// Should exist on all loaders and is loader specific
repositories {
	maven {url "https://modmaven.dev/" }// UnionLib
	maven {url "https://girafi.dk/maven/"}
	maven {url "https://www.cursemaven.com"} //CurseForge
    maven {url "https://repo.spongepowered.org/maven"} // mixin
    maven {url 'https://maven.parchmentmc.org'}//Parchment
    maven {url "https://raw.githubusercontent.com/Fuzss/modresources/main/maven/"}//Fuzs Mod Resources
}

dependencies {
	minecraft "com.mojang:minecraft:${project._minecraft_version}"
	mappings loom.layered() {
  		officialMojangMappings()
  		//parchment("org.parchmentmc.data:parchment-"+mappingsVersion+"@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project._loader_version}"
	modImplementation "fuzs.forgeconfigapiport:forgeconfigapiport-fabric:21.1.0"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project._loader_api_version}"

	modImplementation ("com.stereowalker.unionlib:UnionLib:${_minecraft_version}-${_unionlib_version}-${_loader}")
}

// These aren't loader specific and should exist on all loaders
println('Java: ' + System.getProperty('java.version'))
println('JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
println('Mod Name: ' + _mod_name + ', Mod Version: ' + _mod_version + ', Minecraft Version: ' + _minecraft_version + ', '+"${_loader} Version: " + _loader_version)

version = _minecraft_version + "-" +_mod_version +"-${_loader}"
group = modGroup
base {
    archivesName = _mod_name
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: _minecraft_version,
            minecraft_version_min: _minecraft_version_min, minecraft_version_max: _minecraft_version_max,
            loader_version_min: _loader_version_min, loader_version_max: _loader_version_max,
            mod_page: _mod_page, mod_version: _mod_version, mod_issue_tracker: _mod_issue_tracker,
            mod_name: _mod_name, mod_license: _mod_license, mod_id: _mod_id,
            mod_authors: _mod_authors, mod_description: _mod_description, loader_file: _loader_file,
            unionlib_version_min: _unionlib_version_min, unionlib_version_max: _unionlib_version_max,
    ]
    inputs.properties replaceProperties
    filesMatching([_loader_file, 'pack.mcmeta']) {
        expand replaceProperties// + [project: project]
    }
}

curseforge {
    project {
    	id = "${_curseforge_id}"
		apiKey = "$System.env.CURSEFORGEKEY"
		changelog = file('changelog.md')
		changelogType = "markdown"
		releaseType = 'release'
		addGameVersion("${_minecraft_version}")
        addGameVersion("${_loader}")
		relations {
      		requiredDependency 'unionlib'
		}
		mainArtifact(jar) {
			displayName = _mod_name+"-$project.version"
		}
	}		
}

modrinth {
    projectId = "${_modrinth_id}"
    token = "$System.env.MODRINTH_TOKEN"
    versionNumber = "${project.version}"
    versionType = "release"
    uploadFile = jar
    gameVersions = ["${_minecraft_version}"]
    loaders = ["${_loader}".toLowerCase()]
	changelog = file('changelog.md').text
    dependencies {
        required.project "unionlib"
    }
}

task uploadToAllSites {
    dependsOn "curseforge"
    dependsOn "modrinth"
    group = "publishing"
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
